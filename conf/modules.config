/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*|MAKE_TRANSCRIPTS_FASTA' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
       
    withName: 'SALMON_INDEX' {
        ext.args   = params.gencode ? '--gencode' : ''
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GTF2BED' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }
    }

//
// STAR Salmon alignment options
//

if (!params.skip_alignment && (params.aligner == 'star_salmon' || params.aligner == "star")) {
    process {
        withName: 'STAR_ALIGN' {
            ext.args   = [
                '--quantMode TranscriptomeSAM',
                '--twopassMode Basic',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterMultimapNmax 20',
                '--alignSJDBoverhangMin 1',
                '--outSAMattributes NH HI AS NM MD',
                '--quantTranscriptomeBan Singleend',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { "${params.outdir}/${params.aligner}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    enabled: params.save_align_intermeds
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }
    }
}

//
// Samtools bam options
//

if (!params.skip_alignment) {
    process {
        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: ( ['star_salmon','star'].contains(params.aligner))
            ]
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,csi}",
                enabled: ( ['star_salmon','star'].contains(params.aligner))
            ]
        }
    }
}
    
}

//
// Salmon pseudo-alignment options
//

if (params.pseudo_aligner == 'salmon') {
    process {
        withName: 'SALMON_QUANT' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


//
// SUPPA options
//

if (params.suppa) {

    process {
        withName: 'GENERATE_EVENTS' {
            publishDir = [
                [
                    path: { "${params.outdir}/suppa/generate_events/local_AS_events" },
                    mode: params.publish_dir_mode,
                    pattern: '*.ioe',
                    enabled: params.suppa_local_as_ioe
                ],
                [
                    path: { "${params.outdir}/suppa/generate_events/local_transcript_events" },
                    mode: params.publish_dir_mode,
                    pattern: '*.ioi',
                    enabled: params.suppa_local_tx_ioi
                ]
            ]
        }

        withName: 'PSIPEREVENT' {
            publishDir = [
                [
                    path: { "${params.outdir}/suppa/psi_per_event/local_AS_events" },
                    mode: params.publish_dir_mode,
                    pattern: '*.psi',
                    enabled: params.suppa_local_as_ioe
                ],
                [
                    path: { "${params.outdir}/suppa/psi_per_event/local_transcript_events" },
                    mode: params.publish_dir_mode,
                    pattern: '*.psi',
                    enabled: params.suppa_local_tx_ioi
                ]
            ]
        }

        withName: 'PSIPERISOFORM' {
            publishDir = [
                    path: { "${params.outdir}/suppa/psi_per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*.psi',
                    enabled: params.suppa_per_isoform
            ]
        }

        withName: 'DIFFSPLICE' {
            publishDir = [
                [
                    path: { "${params.outdir}/suppa/diffsplice/local_AS_events" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{dpsi,psivec}',
                    enabled: params.suppa_local_as_ioe
                ],
                [
                    path: { "${params.outdir}/suppa/diffsplice/local_transcript_events" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{dpsi,psivec}',
                    enabled: params.suppa_local_tx_ioi
                ],
                [
                    path: { "${params.outdir}/suppa/diffsplice/per_isoform_transcript" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{dpsi,psivec}',
                    enabled: params.suppa_per_isoform
                ]
            ]
        }
    }
}
